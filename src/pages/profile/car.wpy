<style lang="scss">
.car {
  .region_section_main {
    .car_picker {
      border-bottom: 2rpx dashed #DADADA;
    }
  }
  &_dlicense {
    &_line {
      display: flex;
      margin-top: 30rpx;
    }
    &_item {
      flex: 1;
      width: 100%;
      margin-right: 20rpx;
      position: relative;
      &_img {
        width: 300rpx;
        height: 200rpx;
      }
      &_overlay {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background-color: rgba(255,255,255, .7);
        text-align: center;
        &.uploading {
          .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            margin-top: -14rpx;
            margin-left: -14rpx;
          }
        }
      }
      &_tip {
        color: #A4A4A4;
        font-size: 20rpx;
        padding-top: 60rpx;
      }
      &_add {
        font-size: 40rpx;
        margin-bottom: 20rpx;
        &:before {
          content: '\e90d';
        }
      }
    }
  }
  &_images {
    &_add {
      padding: 20rpx 0;
    }
    &_list {
      padding-top: 30rpx;
      padding-bottom: 20rpx;
      overflow: hidden;
      &_item {
        float: left;
        width: 300rpx;
        height: 200rpx;
        margin-right: 10rpx;
        margin-bottom: 10rpx;
        position: relative;
        &:nth-child(even) {
          margin-right: 0;
        }
      }
      &_img {
        width: 100%;
        height: 100%;
      }
      &_overlay {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background-color: rgba(255,255,255, .7);
        &.uploading {
          .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            margin-top: -14rpx;
            margin-left: -14rpx;
          }
        }
        &.error {
          .tip {
            position: absolute;
            width: 100%;
            top: 50%;
            transform: translateY(-50%);
            color: #EB3034;
            font-size: 24rpx;
            text-align: center;
          }
        }
      }
    }
  }
  &_submit {
    text-align: center;
    padding: 10rpx 0 30rpx 0;
    &_btn {
      display: inline-block;
      margin-right: 30rpx;
      &:last-child {
        margin-right: 0;
      }
    }
  }
  &_close {
    position: absolute;
    top: 10rpx;
    right: 10rpx;
  }
}
</style>

<template>
  <view class="container car region">
    <view class="toptip warning" wx:if="{{car.status === -1}}">车辆审核中</view>
    <view class="toptip success" wx:elif="{{car.status === 0}}">车辆审核已通过</view>
    <view class="toptip error" wx:elif="{{car.status === 1}}">车辆审核未通过，{{car.auditOpinion}}</view>
    <view class="region_section">
      <view class="region_title icon-information">基本信息</view>
      <view class="region_section_main">
        <view :class="{'editable-item': true, error: submitError.license}" @tap="editLicense">
          <view class="editable-item_title">车牌号码</view>
          <view class="editable-item_content">
            <text class="editable-item_content_add" wx:if="{{car.license == null}}">添加车牌号码</text>
            <text class="editable-item_content_edit{{type !== 'add' ? ' disabled' : ''}}" wx:else>{{car.license}}</text>
            <text class="editable-item_arrow arrow-right" wx:if="{{type === 'add'}}"></text>
          </view>
        </view>
        <view :class="{'editable-item': true, error: submitError.number}" @tap="editNumber">
          <view class="editable-item_title">核载人数</view>
          <view class="editable-item_content">
            <text class="editable-item_content_add" wx:if="{{car.number == null}}">添加核载人数</text>
            <text class="editable-item_content_edit{{car.status === 0 ? ' disabled' : ''}}" wx:else>{{car.number}}人</text>
            <text class="editable-item_arrow arrow-right" wx:if="{{car.status !== 0}}"></text>
          </view>
        </view>
        <picker class="car_picker" @change="carAgeChangeHandler" value="{{ageIndex}}" range="{{yearList}}" wx:if="{{car.status !== 0}}">
          <view :class="{'editable-item': true, error: submitError.age}">
            <view class="editable-item_title">出厂年份</view>
            <view class="editable-item_content">
              <text class="editable-item_content_add" wx:if="{{car.age == null}}">添加出厂年份</text>
              <text class="editable-item_content_edit" wx:else>{{ageShow}}年</text>
              <text class="editable-item_arrow arrow-right"></text>
            </view>
          </view>
        </picker>
        <view :class="{'editable-item': true, error: submitError.age}" wx:else>
          <view class="editable-item_title">出厂年份</view>
          <view class="editable-item_content">
            <text class="editable-item_content_add" wx:if="{{car.age == null}}">添加出厂年份</text>
            <text class="editable-item_content_edit disabled" wx:else>{{ageShow}}年</text>
          </view>
        </view>
        <picker class="car_picker" @change="carBrandChangeHandler" value="{{brandIndex}}" range="{{brandList}}" wx:if="{{car.status !== 0}}">
          <view :class="{'editable-item': true, error: submitError.brand}">
            <view class="editable-item_title">车辆品牌</view>
            <view class="editable-item_content">
              <text class="editable-item_content_add" wx:if="{{car.brand == null}}">添加车辆品牌</text>
              <text class="editable-item_content_edit" wx:else>{{car.brand}}</text>
              <text class="editable-item_arrow arrow-right"></text>
            </view>
          </view>
        </picker>
        <view :class="{'editable-item': true, error: submitError.brand}" wx:else>
          <view class="editable-item_title">车辆品牌</view>
          <view class="editable-item_content">
            <text class="editable-item_content_add" wx:if="{{car.brand == null}}">添加车辆品牌</text>
            <text class="editable-item_content_edit disabled" wx:else>{{car.brand}}</text>
          </view>
        </view>
        <picker class="car_picker" @change="carSystemChangeHandler" value="{{systemIndex}}" range="{{systemList}}" wx:if="{{car.status !== 0}}">
          <view :class="{'editable-item': true, error: submitError.system}">
            <view class="editable-item_title">驱动系统</view>
            <view class="editable-item_content">
              <text class="editable-item_content_add" wx:if="{{car.system == null}}">添加驱动系统</text>
              <text class="editable-item_content_edit" wx:else>{{car.system}}</text>
              <text class="editable-item_arrow arrow-right"></text>
            </view>
          </view>
        </picker>
        <view :class="{'editable-item': true, error: submitError.system}" wx:else>
          <view class="editable-item_title">驱动系统</view>
          <view class="editable-item_content">
            <text class="editable-item_content_add" wx:if="{{car.system == null}}">添加驱动系统</text>
            <text class="editable-item_content_edit disabled" wx:else>{{car.system}}</text>
          </view>
        </view>
        <view :class="{'editable-item': true, error: submitError.company}" @tap="editCompany">
          <view class="editable-item_title">车辆所属公司</view>
          <view class="editable-item_content">
            <text class="editable-item_content_add" wx:if="{{car.company == null}}">添加车辆所属公司</text>
            <text class="editable-item_content_edit{{car.status === 0 ? ' disabled' : ''}}" wx:else>{{car.company}}</text>
            <text class="editable-item_arrow arrow-right" wx:if="{{car.status !== 0}}"></text>
          </view>
        </view>
        <picker
          mode="region"
          value="{{belongToValue}}"
          @change="belongToChangeHandler"
          wx:if="{{car.status !== 0}}">
          <view :class="{'editable-item': true, error: submitError.belongTo}">
            <view class="editable-item_title">车辆所属地</view>
            <view class="editable-item_content">
              <text class="editable-item_content_add" wx:if="{{car.belongTo == null}}">添加车辆所属地</text>
              <text class="editable-item_content_edit" wx:else>{{belongToShow}}</text>
              <text class="editable-item_arrow arrow-right"></text>
            </view>
          </view>
        </picker>
        <view :class="{'editable-item': true, error: submitError.belongTo}" wx:else>
          <view class="editable-item_title">车辆所属地</view>
          <view class="editable-item_content">
            <text class="editable-item_content_add" wx:if="{{car.belongTo == null}}">添加车辆所属地</text>
            <text class="editable-item_content_edit disabled" wx:else>{{belongToShow}}</text>
          </view>
        </view>
      </view>
    </view>
    <view class="region_section car_dlicense">
      <view class="region_title icon-information">车辆行驶证</view>
      <view class="region_section_main">
        <view class="car_dlicense_line">
          <view class="car_dlicense_driver car_dlicense_item" @tap="chooseDriverLicensePos">
            <image wx:if="{{!imagesShow.driverLicenses[0]}}" mode="aspectFill" src="../../assets/car_license_up.jpg" class="car_dlicense_item_img" />
            <image wx:else src="{{imagesShow.driverLicenses[0].path}}" mode="aspectFill" class="car_dlicense_item_img" />
            <view class="car_dlicense_item_overlay" wx:if="{{!imagesShow.driverLicenses[0]}}">
              <view class="car_dlicense_item_tip">
                <view class="car_dlicense_item_add car-icons"></view>
                <view>行驶证主页</view>
              </view>
            </view>
            <view class="car_dlicense_item_overlay uploading" wx:if="{{imagesShow.driverLicenses[0] && imagesShow.driverLicenses[0].isUploading}}">
              <view class="loading"></view>
            </view>
            <view class="car_close btn-close" @tap.stop="deleteDriverLicensePosImage" wx:if="{{car.status !== 0 && imagesShow.driverLicenses[0]}}"></view>
          </view>
          <view class="car_dlicense_driver car_dlicense_item" @tap="chooseDriverLicenseOpp">
            <image wx:if="{{!imagesShow.driverLicenses[1]}}" mode="aspectFill" src="../../assets/car_license_down.jpg" class="car_dlicense_item_img" />
            <image wx:else src="{{imagesShow.driverLicenses[1].path}}" mode="aspectFill" class="car_dlicense_item_img" />
            <view class="car_dlicense_item_overlay" wx:if="{{!imagesShow.driverLicenses[1]}}">
              <view class="car_dlicense_item_tip">
                <view class="car_dlicense_item_add car-icons"></view>
                <view>行驶证副页</view>
              </view>
            </view>
            <view class="car_dlicense_item_overlay uploading" wx:if="{{imagesShow.driverLicenses[1] && imagesShow.driverLicenses[1].isUploading}}">
              <view class="loading"></view>
            </view>
            <view class="car_close btn-close" @tap.stop="deleteDriverLicenseOppImage" wx:if="{{car.status !== 0 && imagesShow.driverLicenses[1]}}"></view>
          </view>
        </view>
      </view>
    </view>
    <view class="region_section car_images">
      <view class="region_title icon-camera">车辆照片</view>
      <view class="region_section_main">
        <view class="car_images_list" wx:if="{{imagesShow.images.length}}">
          <view wx:for="{{imagesShow.images}}" wx:key="{{item.path}}" class="car_images_list_item">
            <image class="car_images_list_img" mode="aspectFill" src="{{item.path}}" @tap="previewImage" data-idx="{{index}}" />
            <view class="car_images_list_overlay uploading" wx:if="{{item.isUploading}}">
              <view class="loading"></view>
            </view>
            <view class="car_images_list_overlay error" wx:if="{{item.isUploadError}}">
              <view class="tip">上传失败</view>
            </view>
            <view class="car_close btn-close" @tap="deleteImage" data-idx="{{index}}"></view>
          </view>
        </view>
        <view class="car_images_add" wx:if="{{car.status !== 0}}">
          <button class="car_images_add_btn btn-add" @tap="chooseImages">上传照片</button>
        </view>
      </view>
    </view>
    <view class="car_submit">
      <button class="btn car_submit_btn cancel" @tap="deleteItemCar" wx:if="{{type !== 'add'}}">删除车辆</button>
      <button class="btn car_submit_btn" @tap="submitProfile" wx:if="{{car.status !== 0}}">确认提交</button>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'

  import {
    addCarImage,
    deleteCarImage,
    updateCarImage,
    addCar,
    updateCar,
    deleteCar,
    updateCarImageByIndex,
    inputCarAge,
    inputCarBrand,
    inputCarSystem,
    inputCarBelongTo
  } from '../../actions/car'
  import { API_BASE } from '../../utils/api'
  import { isChooseTempImage } from '../../utils/validate'
  import { uploadFiles, uploadFilesInit } from '../../actions/upload'

  @connect({
    car (state) {
      return state.car
    },
    files (state) {
      return state.upload.files
    }
  }, {
    addCarImage,
    deleteCarImage,
    updateCarImage,
    uploadFiles,
    uploadFilesInit,
    addCar,
    updateCar,
    deleteCar,
    updateCarImageByIndex,
    inputCarAge,
    inputCarBrand,
    inputCarSystem,
    inputCarBelongTo
  })
  export default class ProfileCar extends wepy.page {
    config = {
      navigationBarTitleText: '车辆信息'
    }

    data = {
      type: 'add',
      idx: -1,
      carInfo: {},
      tempImagesPaths: [],
      submitError: {},
      pageHadShown: false,
      ageIndex: 0,
      yearList: (function () {
        const currentYear = new Date().getFullYear()
        const region = 20
        const years = []
        for (let i = currentYear; i > currentYear - region; i--) {
          years.push(`${i}`)
        }
        return years
      })(),
      brandList: [
        '宇通',
        '比亚迪',
        '申龙',
        '金旅',
        '金龙'
      ],

      brandIndex: 0,
      systemList: [
        '燃油',
        '电动',
        '油电混合'
      ],

      systemIndex: 0
    }

    computed = {
      belongToValue () {
        if (this.car && this.car.belongTo) {
          return [...this.car.belongTo]
        }
        return ['北京市', '北京市']
      },

      belongToShow () {
        if (this.car && this.car.belongTo) {
          return this.car.belongTo.join('，')
        }
        return ''
      },

      imagesShow () {
        if (this.car && this.car.images && this.car.images.length) {
          const images = this.car.images.concat()
          const imagesClone = images.map(image => {
            if (image == null) {
              return null
            }
            if (typeof image === 'string') {
              if (!isChooseTempImage(image)) {
                return {
                  path: `${API_BASE}${image}`
                }
              }
              return {
                path: image
              }
            }
            if (!isChooseTempImage(image.path)) {
              image.path = `${API_BASE}${image.path}`
            }
            return image
          })
          return {
            driverLicenses: [imagesClone[0], imagesClone[1]],
            images: imagesClone.splice(2)
          }
        }
        return {
          driverLicenses: [],
          images: []
        }
      },

      ageShow () {
        if (this.car && this.car.age) {
          return new Date(this.car.age).getFullYear()
        }
        return ''
      }
    }

    methods = {
      editNumber () {
        if (this.car.status === 0) {
          return
        }
        wepy.navigateTo({
          url: '../edit/car/number'
        })
      },

      editLicense () {
        if (this.type === 'add') {
          wepy.navigateTo({
            url: '../edit/car/license'
          })
        }
      },

      editCompany () {
        if (this.car.status === 0) {
          return
        }
        wepy.navigateTo({
          url: '../edit/car/company'
        })
      },

      carAgeChangeHandler (e) {
        this.methods.inputCarAge(this.yearList[e.detail.value])
        if (!this.car.age) {
          this.submitError.age = true
          this.submitError.hasError = true
        } else {
          this.submitError.age = false
        }
      },

      carBrandChangeHandler (e) {
        this.methods.inputCarBrand(this.brandList[e.detail.value])
        if (!this.car.brand) {
          this.submitError.submitError.brand = true
          this.submitError.hasError = true
        } else {
          this.submitError.brand = false
        }
      },

      carSystemChangeHandler (e) {
        this.methods.inputCarSystem(this.systemList[e.detail.value])
        if (!this.car.system) {
          this.submitError.submitError.system = true
          this.submitError.hasError = true
        } else {
          this.submitError.system = false
        }
      },

      belongToChangeHandler (e) {
        const value = e.detail.value
        this.methods.inputCarBelongTo(value)
        if (!this.car.belongTo || !this.car.belongTo.length) {
          this.submitError.submitError.belongTo = true
          this.submitError.hasError = true
        } else {
          this.submitError.belongTo = false
        }
      },

      belongToColumnChangeHandler (e) {
        if (e.detail.column === 0) {
          this.provinceList[1] = this.cityList[e.detail.value]
        }
      },

      async chooseDriverLicensePos () {
        const driverLicensePosImage = this.imagesShow.driverLicenses[0]
        try {
          // 预览图片
          if (driverLicensePosImage) {
            const previewImageUrls = []
            const driverLicensePos = driverLicensePosImage.path
            previewImageUrls.push(driverLicensePos)
            await wepy.previewImage({
              urls: previewImageUrls,
              current: driverLicensePos
            })
            return
          }
          const res = await wepy.chooseImage({
            count: 1,
            sizeType: ['original', 'compressed'],
            sourceType: ['album', 'camera']
          })
          const files = res.tempFiles.map(file => file)
          this.methods.updateCarImageByIndex(0, files[0])
          await this.methods.uploadFiles(files, {
            beforeFileUpload: () => {
              const fileCopy = { ...this.car.images[0] }
              fileCopy.isUploading = true
              this.methods.updateCarImageByIndex(0, fileCopy)
            },
            uploadFileSuccess: (index, res) => {
              const fileCopy = { ...this.car.images[0] }
              fileCopy.isUploading = false
              fileCopy.realPath = res
              this.methods.updateCarImageByIndex(0, fileCopy)
            },
            uploadFileError: (index, res) => {
              const fileCopy = { ...this.car.images[0] }
              fileCopy.isUploading = false
              fileCopy.realPath = null
              fileCopy.isUploadError = true
              this.methods.updateCarImageByIndex(0, fileCopy)
            }
          })
        } catch (err) {
          console.log(err)
        }
      },

      async chooseDriverLicenseOpp () {
        const driverLicenseOppImage = this.imagesShow.driverLicenses[1]
        try {
          // 预览图片
          if (driverLicenseOppImage) {
            const previewImageUrls = []
            const driverLicenseOpp = driverLicenseOppImage.path
            previewImageUrls.push(driverLicenseOpp)
            await wepy.previewImage({
              urls: previewImageUrls,
              current: driverLicenseOpp
            })
            return
          }
          const res = await wepy.chooseImage({
            count: 1,
            sizeType: ['original', 'compressed'],
            sourceType: ['album', 'camera']
          })
          const files = res.tempFiles.map(file => file)
          this.methods.updateCarImageByIndex(1, files[0])
          await this.methods.uploadFiles(files, {
            beforeFileUpload: () => {
              const fileCopy = { ...this.car.images[1] }
              fileCopy.isUploading = true
              this.methods.updateCarImageByIndex(1, fileCopy)
            },
            uploadFileSuccess: (index, res) => {
              const fileCopy = { ...this.car.images[1] }
              fileCopy.isUploading = false
              fileCopy.realPath = res
              this.methods.updateCarImageByIndex(1, fileCopy)
            },
            uploadFileError: (index, res) => {
              const fileCopy = { ...this.car.images[1] }
              fileCopy.isUploading = false
              fileCopy.realPath = null
              fileCopy.isUploadError = true
              this.methods.updateCarImageByIndex(1, fileCopy)
            }
          })
        } catch (err) {
          console.log(err)
        }
      },

      async chooseImages () {
        try {
          const len = this.car.images.length
          const res = await wepy.chooseImage({
            count: 9,
            sizeType: ['original', 'compressed'],
            sourceType: ['album', 'camera']
          })
          const files = res.tempFiles.map(file => file)
          this.methods.addCarImage(files)
          await this.methods.uploadFiles(files, {
            beforeFileUpload: (index, file) => {
              const filesCopy = this.car.images.concat()
              filesCopy[len + index].isUploading = true
              this.methods.updateCarImage(filesCopy)
            },
            uploadFileSuccess: (index, res) => {
              const filesCopy = this.car.images.concat()
              filesCopy[len + index].isUploading = false
              filesCopy[len + index].realPath = res
              this.methods.updateCarImage(filesCopy)
            },
            uploadFileError: (index, res) => {
              const filesCopy = this.car.images.concat()
              filesCopy[len + index].isUploading = false
              filesCopy[len + index].isUploadError = true
              filesCopy[len + index].realPath = null
              this.methods.updateCarImage(filesCopy)
            }
          })
        } catch (err) {
          console.log(err)
        }
      },

      async previewImage (e) {
        const idx = e.currentTarget.dataset.idx
        const previewImageUrls = this.imagesShow.images.map(item => item.path)
        try {
          await wepy.previewImage({
            urls: previewImageUrls,
            current: previewImageUrls[idx]
          })
        } catch (err) {
          console.log(err)
        }
      },

      async deleteImage (e) {
        const idx = e.currentTarget.dataset.idx + 2
        this.methods.deleteCarImage(idx)
      },

      deleteDriverLicensePosImage () {
        this.methods.updateCarImageByIndex(0, null)
      },

      deleteDriverLicenseOppImage () {
        this.methods.updateCarImageByIndex(1, null)
      },

      async deleteItemCar () {
        const idx = this.idx
        const res = await wepy.showModal({
          title: '提示',
          content: '是否要删除该车辆',
          confirmColor: '#EB3434'
        })
        if (res.confirm) {
          await this.methods.deleteCar(idx, this.car)
          await wepy.navigateBack()
        }
      },

      async submitProfile () {
        const res = this.checkCarProfile()
        this.submitError = res.submitError
        if (res.hasError) {
          const submitError = this.submitError
          if (submitError.license) {
            await wepy.showToast({
              icon: 'none',
              title: '车牌号填写错误'
            })
            return
          }
          if (submitError.number) {
            await wepy.showToast({
              icon: 'none',
              title: '请填写核载人数'
            })
            return
          }
          if (submitError.age) {
            await wepy.showToast({
              icon: 'none',
              title: '请填写出厂年份'
            })
            return
          }
          if (submitError.brand) {
            await wepy.showToast({
              icon: 'none',
              title: '请填写车辆品牌'
            })
            return
          }
          if (submitError.system) {
            await wepy.showToast({
              icon: 'none',
              title: '请填写驱动系统'
            })
            return
          }
          if (submitError.company) {
            await wepy.showToast({
              icon: 'none',
              title: '请填写所属公司'
            })
            return
          }
          if (submitError.belongTo) {
            await wepy.showToast({
              icon: 'none',
              title: '请填写所属地'
            })
            return
          }
          return
        }
        const car = { ...this.car }
        if (!car.images[0]) {
          await wepy.showToast({
            icon: 'none',
            title: '请上传车辆行驶证主页'
          })
          return
        }
        if (!car.images[1]) {
          await wepy.showToast({
            icon: 'none',
            title: '请上传车辆行驶证副页'
          })
          return
        }
        car.images =  car.images.map(item => {
          if (typeof item === 'object' && item.realPath) {
            return item.realPath
          }
          return item
        })
        if (this.type === 'add') {
          await this.methods.addCar({
            ...car
          })
          this.type = 'edit'
        } else {
          await this.methods.updateCar(this.idx, {
            ...car
          })
        }
      }
    }

    checkCarProfile () {
      const car = this.car
      let hasError = false
      const submitError = {}
      if (!car.license || (car.license.length !== 7 && car.license.length !== 8)) {
        submitError.license = true
        hasError = true
      }
      if (!car.number) {
        submitError.number = true
        hasError = true
      }
      if (!car.age) {
        submitError.age = true
        hasError = true
      }
      if (!car.brand) {
        submitError.brand = true
        hasError = true
      }
      if (!car.system) {
        submitError.system = true
        hasError = true
      }
      if (!car.company) {
        submitError.company = true
        hasError = true
      }
      if (!car.belongTo || !car.belongTo.length) {
        submitError.belongTo = true
        hasError = true
      }
      return {
        hasError,
        submitError
      }
    }

    onLoad (options) {
      this.pageHadShown = false
      this.type = options.type
      if (this.type === 'add') {
        this.methods.addCarImage([null, null])
      }
      if (options.idx) {
        this.idx = options.idx
      }
    }

    onShow () {
      if (this.pageHadShown) {
        this.pageHadShown = true
        const res = this.checkCarProfile()
        this.submitError = res.submitError
      }
    }

    onHide () {
      this.pageHadShown = true
    }

    onUnload () {
      this.methods.uploadFilesInit()
    }
  }
</script>
