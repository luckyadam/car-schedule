<style lang="scss">

</style>

<template>
  <view class="tab">
    <view class="tab_item tab_trip" hidden="{{currentTabIndex !== 0}}">
      <Trips />
    </view>
    <view class="tab_item tab_publish" hidden="{{currentTabIndex !== 1}}">
      <Trip />
    </view>
    <view class="tab_item tab_mine" hidden="{{currentTabIndex !== 2}}">
      <Me />
    </view>
    <TabBar :active.sync="currentTabIndex" />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'

  import TabBar from '../components/tabBar'
  import Trips from '../components/trips'
  import Trip from '../components/trip'
  import Me from '../components/me'

  import { fetchMessages } from '../actions/message'
  import { initUserMessage, initUserCars, setUserMessageHasMore } from '../actions/user'
  import { fetchCars } from '../actions/car'
  import { ROLE } from '../constants/user'

  @connect({
    role (state) {
      return state.user.role
    },
    messages (state) {
      return state.user.messages
    },
    isMessagesHasMore (state) {
      return state.user.isMessagesHasMore
    }
  }, {
    initUserMessage,
    fetchMessages,
    initUserCars,
    fetchCars,
    setUserMessageHasMore
  })
  export default class Container extends wepy.page {
    config = {
      navigationBarTitleText: '汽车调度',
      enablePullDownRefresh: true
    }

    components = {
      TabBar,
      Trips,
      Trip,
      Me
    }

    data = {
      currentTab: 0,
      tripsPage: 0,
      tripsSizePerPage: 20
    }

    computed = {
      currentTabIndex () {
        return parseInt(this.currentTab)
      }
    }

    events = {
      switchTab: (idx) => {
        switch (idx) {
          case 0:
            this.$broadcast('showTrips')
            this.currentTab = 0
            break
          case 1:
            this.$broadcast('showTrip')
            this.currentTab = 1
            break
          case 2:
            this.$broadcast('showMe')
            this.currentTab = 2
            break
        }
      }
    }

    async onPullDownRefresh () {
      if (this.currentTabIndex === 0) {
        this.tripsPage = 0
        await this.methods.fetchMessages(this.role, {
          page: this.tripsPage,
          size: this.tripsSizePerPage,
          type: 0
        })
      } else if (this.currentTabIndex === 2) {
        if (this.role === ROLE.DRIVER) {
          this.methods.initUserCars()
          await this.methods.fetchCars()
        }
      }
      await wepy.stopPullDownRefresh()
    }

    async onReachBottom () {
      if (this.currentTabIndex === 0) {
        if (this.isMessagesHasMore) {
          this.tripsPage++
          const tripsLength = this.messages.length
          await this.methods.fetchMessages(this.role, {
            page: this.tripsPage,
            size: this.tripsSizePerPage,
            type: 0
          })
          if (this.messages.length === tripsLength) {
            this.methods.setUserMessageHasMore(false)
            this.tripsPage--
          }
        }
      }
    }

    onLoad (options) {
      const tab = options.tab || 0
      this.currentTab = tab
    }
  }
</script>
